#!/usr/bin/env python3

# The purpose of this program is to provide an interactive substitution cipher decoder.
# The program uses English letter frequency to reccomend the most likely one-to-one
# substitution. It is however up to the user to change the input
# Future hope is to automate the process entirely

import os


SecretMessage = 'GRGZQEGKXJPRQERQEWXJXLDQPHQORRNQRRNGEIZQPTEJRQDVQYZVNQRRNTYZTTKHJPGEZRQEOTJERNTXDQETRTQPRNKQENQWQDVQYZQZZLKTWRNQRNTVQZKJPTGERTDDGITERRNQEWJDXNGEZUTOQLZTNTNQWQONGTFTWZJKLONRNTVNTTDETVYJPSVQPZQEWZJJEVNGDZRQDDRNTWJDXNGEZNQWTFTPWJETVQZKLOSQUJLRGERNTVQRTPNQFGEIQIJJWRGKTULROJEFTPZTDYRNTWJDXNGEZNQWQDVQYZUTDGTFTWRNQRRNTYVTPTHQPKJPTGERTDDGITERRNQEKQEHJPXPTOGZTDYRNTZQKTPTQZJEZOLPGJLZDYTEJLINRNTWJDXNGEZNQWDJEISEJVEJHRNTGKXTEWGEIWTZRPLORGJEJHRNTXDQETRTQPRNQEWNQWKQWTKQEYQRRTKXRZRJQDTPRKQESGEWJHRNTWQEITPULRKJZRJHRNTGPOJKKLEGOQRGJEZVTPTKGZGERTPXPTRTWQZQKLZGEIQRRTKXRZRJXLEONHJJRUQDDZJPVNGZRDTHJPRGWUGRZZJRNTYTFTERLQDDYIQFTLXQEWDTHRRNTTQPRNUYRNTGPJVEKTQEZZNJPRDYUTHJPTRNTFJIJEZQPPGFTWRNTDQZRTFTPWJDXNGEKTZZQITVQZKGZGERTPXPTRTWQZQZLPXPGZGEIDYZJXNGZRGOQRTWQRRTKXRRJWJQWJLUDTUQOSVQPWZZJKTPZQLDRRNPJLINQNJJXVNGDZRVNGZRDGEIRNTZRQPZXQEIDTWUQEETPULRGEHQORRNTKTZZQITVQZRNGZZJDJEIQEWRNQESZHJPQDDRNTHGZNGEHQORRNTPTVQZJEDYJETZXTOGTZJERNTXDQETRKJPTGERTDDGITERRNQEWJDXNGEZQEWRNTYZXTERQDJRJHRNTGPRGKTGEUTNQFGJLPQDPTZTQPONDQUJPQRJPGTZPLEEGEIPJLEWGEZGWTVNTTDZQEWOJEWLORGEIHPGINRTEGEIDYTDTIQERQEWZLURDTTBXTPGKTERZJEKQERNTHQORRNQRJEOTQIQGEKQEOJKXDTRTDYKGZGERTPXPTRTWRNGZPTDQRGJEZNGXVQZTERGPTDYQOOJPWGEIRJRNTZTOPTQRLPTZXDQEZ'

SecretMessage = "CGZNL YJBEN QYDLQ ZQSUQ NZCYD SNQVU BFGBK GQUQZ QSUQN UZCYD SNJDS UDCXJ ZCYDS NZQSU QNUZB WSBNZ QSUQN UDCXJ CUBGS BXJDS UCTYV SUJQG WTBUJ KCWSV LFGBK GSGZN LYJCB GJSZD GCHMS UCJCU QJLYS BXUMA UJCJM JCBGZ CYDSN CGKDC ZDSQZ DVSJJ SNCGJ DSYVQ CGJSO JCUNS YVQZS WALQV SJJSN UBTSX COSWG MTASN BXYBU CJCBG UWBKG JDSQV YDQAS JXBNS OQTYV SKCJD QUDCX JBXQK BMVWA SNSYV QZSWA LWAKB MVWAS ZBTSS QGWUB BGJDS TSJDB WCUGQ TSWQX JSNRM VCMUZ QSUQN KDBMU SWCJJ BZBTT MGCZQ JSKCJ DDCUE SGSNQ VUJDS SGZNL YJCBG UJSYY SNXBN TSWAL QZQSU QNZCY DSNCU BXJSG CGZBN YBNQJ SWQUY QNJBX TBNSZ BTYVS OUZDS TSUUM ZDQUJ DSICE SGNSZ CYDSN QGWUJ CVVDQ UTBWS NGQYY VCZQJ CBGCG JDSNB JULUJ STQUK CJDQV VUCGE VSQVY DQASJ UMAUJ CJMJC BGZCY DSNUJ DSZQS UQNZC YDSNC USQUC VLANB FSGQG WCGYN QZJCZ SBXXS NUSUU SGJCQ VVLGB ZBTTM GCZQJ CBGUS ZMNCJ LUDQF SUYSQ NSYNB WMZSW TBUJB XDCUF GBKGK BNFAS JKSSG QGWDC USQNV LYVQL UKSNS TQCGV LZBTS WCSUQ GWDCU JBNCS UESGN SUDSN QCUSW JBJDS YSQFB XUBYD CUJCZ QJCBG QGWQN JCUJN LALJD SSGWB XJDSU COJSS GJDZS GJMNL GSOJD SKNBJ STQCG VLJNQ ESWCS UMGJC VQABM JCGZV MWCGE DQTVS JFCGE VSQNQ GWTQZ ASJDZ BGUCW SNSWU BTSBX JDSXC GSUJS OQTYV SUCGJ DSSGE VCUDV QGEMQ ESCGD CUVQU JYDQU SDSKN BJSJN QECZB TSWCS UQVUB FGBKG QUNBT QGZSU QGWZB VVQAB NQJSW KCJDB JDSNY VQLKN CEDJU TQGLB XDCUY VQLUK SNSYM AVCUD SWCGS WCJCB GUBXI QNLCG EHMQV CJLQG WQZZM NQZLW MNCGE DCUVC XSJCT SQGWC GJKBB XDCUX BNTSN JDSQJ NCZQV ZBVVS QEMSU YMAVC UDSWJ DSXCN UJXBV CBQZB VVSZJ SWSWC JCBGB XDCUW NQTQJ CZKBN FUJDQ JCGZV MWSWQ VVAMJ JKBBX JDSYV QLUGB KNSZB EGCUS WQUUD QFSUY SQNSU QVJDB MEDGB QJJSG WQGZS NSZBN WUXBN JDSYS NCBWU MNICI STBUJ ACBEN QYDSN UQENS SJDQJ UDQFS UYSQN SKQUS WMZQJ SWQJJ DSFCG EUGSK UZDBB VCGUJ NQJXB NWQXN SSUZD BBVZD QNJSN SWCGQ ABMJQ HMQNJ SNBXQ TCVSX NBTDC UDBTS ENQTT QNUZD BBVUI QNCSW CGHMQ VCJLW MNCGE JDSSV CPQAS JDQGS NQAMJ JDSZM NNCZM VMTKQ UWCZJ QJSWA LVQKJ DNBME DBMJS GEVQG WQGWJ DSUZD BBVKB MVWDQ ISYNB ICWSW QGCGJ SGUCI SSWMZ QJCBG CGVQJ CGENQ TTQNQ GWJDS ZVQUU CZUQJ JDSQE SBXUD QFSUY SQNST QNNCS WJDSL SQNBV WQGGS DQJDQ KQLJD SZBGU CUJBN LZBMN JBXJD SWCBZ SUSBX KBNZS UJSNC UUMSW QTQNN CQESV CZSGZ SBGGB ISTAS NJKBB XDQJD QKQLU GSCED ABMNU YBUJS WABGW UJDSG SOJWQ LQUUM NSJLJ DQJJD SNSKS NSGBC TYSWC TSGJU JBJDS TQNNC QESJD SZBMY VSTQL DQISQ NNQGE SWJDS ZSNST BGLCG UBTSD QUJSU CGZSJ DSKBN ZSUJS NZDQG ZSVVB NQVVB KSWJD STQNN CQESA QGGUJ BASNS QWBGZ SCGUJ SQWBX JDSMU MQVJD NSSJC TSUQG GSUYN SEGQG ZLZBM VWDQI SASSG JDSNS QUBGX BNJDC UUCOT BGJDU QXJSN JDSTQ NNCQE SUDSE QISAC NJDJB QWQME DJSNU MUQGG QKDBK QUAQY JCUSW BGTQL JKCGU UBGDQ TGSJQ GWWQM EDJSN RMWCJ DXBVV BKSWQ VTBUJ JKBLS QNUVQ JSNQG WKSNS AQYJC USWBG XSANM QNLDQ TGSJW CSWBX MGFGB KGZQM USUQJ JDSQE SBXQG WKQUA MNCSW BGQME MUJQX JSNJD SACNJ DBXJD SJKCG UJDSN SQNSX SKDCU JBNCZ QVJNQ ZSUBX UDQFS UYSQN SMGJC VDSCU TSGJC BGSWQ UYQNJ BXJDS VBGWB GJDSQ JNSUZ SGSCG ASZQM USBXJ DCUEQ YUZDB VQNUN SXSNJ BJDSL SQNUA SJKSS GQGWQ UUDQF SUYSQ NSUVB UJLSQ NUACB ENQYD SNUQJ JSTYJ CGEJB QZZBM GJXBN JDCUY SNCBW DQISN SYBNJ SWTQG LQYBZ NLYDQ VUJBN CSUGC ZDBVQ UNBKS UDQFS UYSQN SUXCN UJACB ENQYD SNNSZ BMGJS WQUJN QJXBN WVSES GWJDQ JUDQF SUYSQ NSXVS WJDSJ BKGXB NVBGW BGJBS UZQYS YNBUS ZMJCB GXBNW SSNYB QZDCG EQGBJ DSNSC EDJSS GJDZS GJMNL UJBNL DQUUD QFSUY SQNSU JQNJC GEDCU JDSQJ NCZQV ZQNSS NTCGW CGEJD SDBNU SUBXJ DSQJN SYQJN BGUCG VBGWB GRBDG QMANS LNSYB NJSWJ DQJUD QFSUY SQNSD QWASS GQZBM GJNLU ZDBBV TQUJS NUBTS JKSGJ CSJDZ SGJMN LUZDB VQNUD QISUM EESUJ SWJDQ JUDQF SUYSQ NSTQL DQISA SSGST YVBLS WQUQU ZDBBV TQUJS NALQV SOQGW SNDBE DJBGB XVQGZ QUDCN SQZQJ DBVCZ VQGWB KGSNK DBGQT SWQZS NJQCG KCVVC QTUDQ FSUDQ XJSCG DCUKC VVGBS ICWSG ZSUMA UJQGJ CQJSU UMZDU JBNCS UBJDS NJDQG DSQNU QLZBV VSZJS WQXJS NDCUW SQJDDSNSM YBGVS ENQGW QNBUS KCJDQ ENQIS QGWUJ QJSVL QCNQG WANBM EDJTS JDSAS SJVSX NBTQE VQUUZ QUSCG KDCZD CJKQU SGZVB USWCJ KQUQA SQMJC XMVUZ QNQAQ SMUQG WQJJD QJJCT SMGFG BKGJB GQJMN QVCUJ UBXZB MNUSQ ENSQJ YNCPS CGQUZ CSGJC XCZYB CGJBX ICSKJ DSNSK SNSJK BNBMG WAVQZ FUYBJ UGSQN BGSSO JNSTC JLBXJ DSAQZ FQGWQ VBGEB GSGSQ NJDSB JDSNJ DSUZQ VSUKS NSSOZ SSWCG EVLDQ NWQGW EVBUU LKCJD QVVJD SQYYS QNQGZ SBXAM NGCUD SWEBV WJDSK SCEDJ BXJDS CGUSZ JKQUI SNLNS TQNFQ AVSQG WJQFC GEQVV JDCGE UCGJB ZBGUC WSNQJ CBGCZ BMVWD QNWVL AVQTS RMYCJ SNXBN DCUBY CGCBG NSUYS ZJCGE CJ"

SecretMessage = ''.join(SecretMessage.split(' '))
print(SecretMessage)
SecretMessage = list(SecretMessage)

letterdict = {}

for i in range (26):
    letter = chr(i+65)
    letterdict[letter] = 0

for i in SecretMessage:
    letterdict[str(i)] += 1
        # Creates letter dictionary, counts the instances of those letters
        # in the ciphertext, forming a letter-instance dictionary


FreqList = 'ETAOINSHRDLCUMWFGYPBVKJXQZ'
FreqList = list(FreqList)

ThisFreqList = []
for w in sorted(letterdict, key=letterdict.get, reverse=True):
    ThisFreqList.append(w)


dictionary = dict(zip(ThisFreqList,FreqList))
        # ThisFreqList-a sorted list of letter frequencies in the given sample
        # FreqList, taken from the internet, as the most common English letters
        # A new dictionary is created to relate these two 



SecretMessage = ''.join(SecretMessage)
blank = '-'*len(SecretMessage)
        # The secret message is converted into a string again and a 
        # 'tick string' is created of equal length



# Change() is the function that will ask for user input of what letters to 
# substitute for which. All instances of the letter are changed and the 
# corresponding 'tick' mark is changed as well

def Change():
    global SecretMessage
    global blank
    change = input("enter what to change: eg 'em' changes E to M (case insensitive): ")
    change = change.upper()
    print(change)
    initial = change[0]
    final = change[1]
    while initial in SecretMessage:
        global index
        index = SecretMessage.find(initial)
        blank = list(blank)
        blank[index] = final
        blank = ''.join(blank)
        SecretMessage = SecretMessage.replace(SecretMessage[index],SecretMessage[index].lower(),1)
    SecretMessage = SecretMessage.replace(SecretMessage[index].lower(),SecretMessage[index].upper())

# The main functionality, while blank ticks still exist, this will display the
# recomended changes and call the Change() function
os.system("printf '\e[8;40;168t'")
    # resize terminal for user experience
while '-' in blank:
    os.system('clear')
    print('recommended changes based on frequency analysis:')
    print("\n\nchange from:",' '.join(ThisFreqList))
    print("change to  :",' '.join(FreqList),"\t\tuse your judgement, 't-e' may be 'the', etc... Good Luck!",'\n\n')



    longlistSecretMessage = []
    longlistblank = []
    measure = len(SecretMessage)//8
    measure = len(SecretMessage)//24
    for i in range(len(SecretMessage)//measure+1):
        longlistSecretMessage.append(SecretMessage[0+i*measure:measure+i*measure])
        longlistblank.append(blank[0+i*measure:measure+i*measure])

    for i in range(len(longlistSecretMessage)):
        print(longlistblank[i])
        print(longlistSecretMessage[i])
        print()
    # The above splits the message into reasonablly-sized chunks, placing
    # those in a list so they can be displayed on top of eachother for ease
    # of comparison when choosing which letters to replace
    Change()



print('done? I suppose yourfinal message is:')
print(blank)


"""    The following automatically replaces each entry without prompting the 
        user, it's very flawed right now unfortunately
Message = []
for i in SecretMessage:
    Message.append(dictionary[i])

Message = ''.join(Message)

print(Message)
"""
